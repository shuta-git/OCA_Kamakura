//===========================================================================
//!	@file	Pumpkin.cpp
//!	@brief	エネミー
//===========================================================================
#include "Pumpkin.h"

//---------------------------------------------------------------------------
//! コンストラクタ
//---------------------------------------------------------------------------
Pumpkin::Pumpkin(Vector3 pos)
{
    pos_ = pos;

    initialize();
}

//---------------------------------------------------------------------------
//! デストラクタ
//---------------------------------------------------------------------------
Pumpkin::~Pumpkin()
{
    finalize();
}

//---------------------------------------------------------------------------
//! 初期化
//!	@retval	true	正常終了	(成功)
//!	@retval	false	エラー終了	(失敗)
//---------------------------------------------------------------------------
bool Pumpkin::initialize()
{
    //-------------------------------------------------------------
    // モデル初期化
    //-------------------------------------------------------------
    modelFbx_ = fbx::loadFBX("data/Enemy/Pumpkin/pumpkin_Idle.fbx", 1.0f);
    if(modelFbx_ == false) {
        MessageBox(nullptr, "fbxモデルの読み込みに失敗しました.", nullptr, MB_OK);
    }
    moveSpeed_ = 1.0f;
    modelFbx_->setRotateX(radian(180.0f));
    modelFbx_->setPos(pos_);

    //-------------------------------------------------------------
    // コライダー初期化
    //-------------------------------------------------------------
    boxCollider_ = gpu::createBoxCollider();
    boxCollider_->setDepth(0.5f);
    boxCollider_->setWigth(0.5f);

    return true;
}

//---------------------------------------------------------------------------
//! 更新
//---------------------------------------------------------------------------
void Pumpkin::update()
{
   
}

//---------------------------------------------------------------------------
//! 更新
//---------------------------------------------------------------------------
void Pumpkin::update(Vector3 playerPos)
{
    Approach(playerPos);

    Vector3 boxPos = pos_;
    boxPos.x_ -= boxCollider_->getWigth() / 2;
    boxPos.z_ -= boxCollider_->getDepth() / 2;
    boxCollider_->setPos(boxPos);

    if(boxCollider_->getTrigger()) {
        setState(STATE::DEAD);
    }

}

//---------------------------------------------------------------------------
//! 描画
//---------------------------------------------------------------------------
void Pumpkin::render()
{
    modelFbx_->render();

    if(colliderRender) {
        boxCollider_->render();
    }
}

//---------------------------------------------------------------------------
//! 解放
//---------------------------------------------------------------------------
void Pumpkin::finalize()
{
}

//---------------------------------------------------------------------------
//! imgui描画
//---------------------------------------------------------------------------
void Pumpkin::imguiRender()
{
    ImGui::SetNextTreeNodeOpen(true, ImGuiCond_Once);
    
    if(ImGui::CollapsingHeader(u8"Pumpkin")) {
    
        ImGui::Checkbox(u8"コライダー", &colliderRender);
    
        boxCollider_->imguiRender();
    
        //-------------------------------------------------------------
        // モデル情報表示
        //-------------------------------------------------------------
        //modelFbx_->imguiRender();
    }
}


