//===========================================================================
//!	@file	TitleScene.cpp
//!	@brief	タイトルシーン
//===========================================================================
#include "TitleScene.h"

//---------------------------------------------------------------------------
//! コンストラクタ
//---------------------------------------------------------------------------
TitleScene::TitleScene()
{
    initialize();
}

//---------------------------------------------------------------------------
//! デストラクタ
//---------------------------------------------------------------------------
TitleScene::~TitleScene()
{
    finalize();
}

//---------------------------------------------------------------------------
//! 初期化
//!	@retval	true	正常終了	(成功)
//!	@retval	false	エラー終了	(失敗)
//---------------------------------------------------------------------------
bool TitleScene::initialize()
{
    setMode(SceneMode::TITLE);

    //-------------------------------------------------------------
    // タイトルカメラ初期化
    //-------------------------------------------------------------
    cameraTitle_ = std::make_unique<CameraTitle>();
    cameraTitle_->setNearZ(0.01f);
    cameraTitle_->setFarZ(1000.0f);

    map_    = std::make_unique<Map>();

    textScale_ = 4.9f;
    text_      = u8"SPACE KEY";
    isRender_  = true;

    time_      = 0;

    return true;
}

//---------------------------------------------------------------------------
//! 更新
//---------------------------------------------------------------------------
void TitleScene::update()
{
    textAnimation();

    //-------------------------------------------------------------
    // Debugカメラの更新
    //-------------------------------------------------------------
    cameraTitle_->update();

    if(GetKeyState(VK_SPACE) & 0x8000) {
        setMode(SceneMode::LOAD);
    }
}

//---------------------------------------------------------------------------
//! 描画
//---------------------------------------------------------------------------
void TitleScene::render(RenderMode mode)
{
    if(mode == RenderMode::Scene) {
        GmRender()->setCamera(cameraTitle_.get());
        map_->render();

        // テキスト
        if(isRender_) {
            gpu::createText(840, 830,textScale_, text_.c_str());
        }
        gpu::createText(0,0,2.0f, u8"F5キーでImGui表示");
    }
}

//---------------------------------------------------------------------------
//! 解放
//---------------------------------------------------------------------------
void TitleScene::finalize()
{
    cameraTitle_.release();
}

//---------------------------------------------------------------------------
//! imgui描画
//---------------------------------------------------------------------------
void TitleScene::imguiRender()
{
    map_->imguiRender();

    ImGui::Begin("Text");
    {
        ImGui::SetNextTreeNodeOpen(true, ImGuiCond_Once);
        if(ImGui::CollapsingHeader("Push Key")) {

            ImGui::Checkbox(u8"プッシュテキスト", &isRender_);
            //---------------------------------------------------------------------------
            //! テキストの表示
            //---------------------------------------------------------------------------
            char text[256] = {};
            text_.copy(text, text_.size());
            ImGui::Text("Text");
            ImGui::InputTextMultiline("##text", text, sizeof(text));
            text_ = text;
            //---------------------------------------------------------------------------
            //! スケールの表示
            //---------------------------------------------------------------------------
            ImGui::Text("textScale");
            ImGui::SameLine(80);
            ImGui::DragFloat("##textScale", &textScale_, 0.3f, -FLT_MAX, FLT_MAX);
        }
    }
    ImGui::End();

}

//---------------------------------------------------------------------------
//! テキストアニメーション
//---------------------------------------------------------------------------
void TitleScene::textAnimation()
{
    time_ += getDeltaTime();

    if ((int)time_ % 2 > 0) {
        isRender_ = true;
    }
    else {
        isRender_ = false;
    }
}
