//===========================================================================
//!	@file	EnemyManager.cpp
//!	@brief	エネミーマネージャー
//===========================================================================
#include "EnemyManager.h"

//---------------------------------------------------------------------------
//! コンストラクタ
//---------------------------------------------------------------------------
EnemyManager::EnemyManager()
{
    initialize();
}

//---------------------------------------------------------------------------
//! デストラクタ
//---------------------------------------------------------------------------
EnemyManager::~EnemyManager()
{
    finalize();
}

//---------------------------------------------------------------------------
//! 初期化
//!	@retval	true	正常終了	(成功)
//!	@retval	false	エラー終了	(失敗)
//---------------------------------------------------------------------------
bool EnemyManager::initialize()
{
    time_ = 0.0f;

    return true;
}

//---------------------------------------------------------------------------
//! 更新
//---------------------------------------------------------------------------
void EnemyManager::update()
{
}

//---------------------------------------------------------------------------
//! 更新
//---------------------------------------------------------------------------
void EnemyManager::update(Vector3 playerPos)
{
    spawn();

    for(int i = 0; i < enemies.size(); i++) {
        enemies[i]->update(playerPos);

        if(enemies[i]->getState() == STATE::DEAD) {
            enemies[i] = nullptr;
        }
    }

    erase();
}

//---------------------------------------------------------------------------
//! 描画
//---------------------------------------------------------------------------
void EnemyManager::render()
{
    for(int i = 0; i < enemies.size(); i++) {
        enemies[i]->render();
    }
}

//---------------------------------------------------------------------------
//! 解放
//---------------------------------------------------------------------------
void EnemyManager::finalize()
{
}

//---------------------------------------------------------------------------
//! imgui描画
//---------------------------------------------------------------------------
void EnemyManager::imguiRender()
{
    ImGui::Begin(u8"エネミー");

    if(ImGui::BeginTabBar(u8"エネミー")) {
        for(int i = 0; i < enemies.size(); i++) {
            enemies[i]->imguiRender();
        }
    
        ImGui::EndTabBar();
    }

    s32 m = (s32)time_ / 60;             // 分
    s32 s = (s32)(fmod(time_, 60.0f));   //　秒
    ImGui::Text("time : %f", time_);
    ImGui::Text("m : %02d", m);
    ImGui::Text("s : %02d", s);

    ImGui::End();
}

//---------------------------------------------------------------------------
//! エネミーの数を取得
//---------------------------------------------------------------------------
size_t EnemyManager::getSize() const
{
    return enemies.size();
}

//---------------------------------------------------------------------------
//! ボックスコライダーを取得
//---------------------------------------------------------------------------
std::shared_ptr<gpu::BoxCollider> EnemyManager::getBoxCollider(int i) const
{
    return enemies[i]->getBoxCollider();
}

//---------------------------------------------------------------------------
//! 座標を取得
//---------------------------------------------------------------------------
Vector3 EnemyManager::getPos(int i) const
{
    return enemies[i]->getPos();
}

//---------------------------------------------------------------------------
//! 座標を設定
//---------------------------------------------------------------------------
void EnemyManager::setPos(int i, Vector3 pos)
{
    enemies[i]->setPos(pos);
}

//---------------------------------------------------------------------------
//! イレース処理
//---------------------------------------------------------------------------
void EnemyManager::erase()
{
    std::vector<std::unique_ptr<EnemyBase>>::iterator it = enemies.begin();
    while(it != enemies.end()) {
        if(*it == nullptr) {
            it = enemies.erase(it);
        }
        else {
            it++;
        }
    }
}

//---------------------------------------------------------------------------
//! スポーン
//---------------------------------------------------------------------------
void EnemyManager::spawn()
{
    time_ += getDeltaTime();

    if(time_ >  6.0f) {
        int     r = rand() % 3;
        Vector3 spawnPos;

        switch(r) {
            case 0:
                spawnPos = Vector3(0, 0.1f, -3.0f);
                break;
            case 1:
                spawnPos = Vector3(0, 0.1f, 3.0f);
                break;
            case 2:
                spawnPos = Vector3(3.0f, 0.1f, 0.0f);
                break;
            case 3:
                spawnPos = Vector3(-3.0f, 0.1f, 0.0f);
                break;
            default:
                break;
        }

        enemies.push_back(std::make_unique<Pumpkin>(spawnPos));

        time_ = 0.0f;
    }

}
