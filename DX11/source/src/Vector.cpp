#include "Vector.h"
//===========================================================================
//!
//!	@file	Vector.cpp
//!	@brief	ベクトル
//!
//===========================================================================

//===========================================================================
//	３要素ベクトル構造体
//===========================================================================

//---------------------------------------------------------------------------
// デフォルトコンストラクタ
//---------------------------------------------------------------------------
Vector3::Vector3()
{
}

//---------------------------------------------------------------------------
// コンストラクタ (xyz指定)
//!	@param	[in]	x		X値
//!	@param	[in]	y		Y値
//!	@param	[in]	z		Z値
//---------------------------------------------------------------------------
Vector3::Vector3(f32 x, f32 y, f32 z)
{
    x_ = x;
    y_ = y;
    z_ = z;
}

//---------------------------------------------------------------------------
// コンストラクタ
//!	@param	[in]	v		ベクトル値
//---------------------------------------------------------------------------
Vector3::Vector3(const Vector3& v)
{
    x_ = v.x_;
    y_ = v.y_;
    z_ = v.z_;
}

//---------------------------------------------------------------------------
// コンストラクタ
//!	@param	[in]	v		ベクトル値
//---------------------------------------------------------------------------
Vector3::Vector3(const Vector4& v)
{
    x_ = v.x_;
    y_ = v.y_;
    z_ = v.z_;
}

//---------------------------------------------------------------------------
//!	代入
//---------------------------------------------------------------------------
Vector3& Vector3::operator=(const Vector3& v)
{
    x_ = v.x_;
    y_ = v.y_;
    z_ = v.z_;

    return *this;
}

//---------------------------------------------------------------------------
//! 正の値
//---------------------------------------------------------------------------
Vector3 Vector3::operator+() const
{
    return *this;
}

//---------------------------------------------------------------------------
// 負の値
//---------------------------------------------------------------------------
Vector3 Vector3::operator-() const
{
    return *this * -1.0f;
}

//---------------------------------------------------------------------------
// 加算
//---------------------------------------------------------------------------
Vector3 Vector3::operator+(const Vector3& v) const
{
    Vector3 result;
    result.x_ = x_ + v.x_;
    result.y_ = y_ + v.y_;
    result.z_ = z_ + v.z_;

    return result;
}

//---------------------------------------------------------------------------
// 減算
//---------------------------------------------------------------------------
Vector3 Vector3::operator-(const Vector3& v) const
{
    Vector3 result;
    result.x_ = x_ - v.x_;
    result.y_ = y_ - v.y_;
    result.z_ = z_ - v.z_;

    return result;
}

//---------------------------------------------------------------------------
// スケーリング
//---------------------------------------------------------------------------
Vector3 Vector3::operator*(f32 scale) const
{
    Vector3 result;
    result.x_ = x_ * scale;
    result.y_ = y_ * scale;
    result.z_ = z_ * scale;

    return result;
}

//---------------------------------------------------------------------------
// スケーリング
//---------------------------------------------------------------------------
Vector3 Vector3::operator/(f32 scale) const
{
    Vector3 result;
    f32     invScale = 1.0f / scale;
    result.x_        = x_ * invScale;
    result.y_        = y_ * invScale;
    result.z_        = z_ * invScale;

    return result;
}

//---------------------------------------------------------------------------
// 加算
//---------------------------------------------------------------------------
Vector3& Vector3::operator+=(const Vector3& v)
{
    x_ += v.x_;
    y_ += v.y_;
    z_ += v.z_;

    return *this;
}

//---------------------------------------------------------------------------
// 減算
//---------------------------------------------------------------------------
Vector3& Vector3::operator-=(const Vector3& v)
{
    x_ -= v.x_;
    y_ -= v.y_;
    z_ -= v.z_;

    return *this;
}

//---------------------------------------------------------------------------
// スケーリング
//---------------------------------------------------------------------------
Vector3& Vector3::operator*=(f32 scale)
{
    x_ *= scale;
    y_ *= scale;
    z_ *= scale;

    return *this;
}

//---------------------------------------------------------------------------
// スケーリング
//---------------------------------------------------------------------------
Vector3& Vector3::operator/=(f32 scale)
{
    f32 invScale = 1.0f / scale;

    return operator*=(invScale);
}

//---------------------------------------------------------------------------
// 長さの２乗
//---------------------------------------------------------------------------
f32 Vector3::lengthSq() const
{
    return x_ * x_ + y_ * y_ + z_ * z_;
}

//---------------------------------------------------------------------------
// ベクトルの長さ
//---------------------------------------------------------------------------
f32 Vector3::length() const
{
    f32 L = lengthSq();   // 長さの二乗
    if(L == 0.0f) {
        return 0.0f;
    }
    return std::sqrtf(L);
}

//---------------------------------------------------------------------------
// 正規化
//---------------------------------------------------------------------------
Vector3 Vector3::normalize() const
{
    f32 L = lengthSq();   // 長さの2乗を求める

    // 長さが0.0なら自分自身のベクトルの長さは0.0になっている。
    if(L == 0.0f) {
        return *this;
    }
    return *this / std::sqrtf(L);
}

//---------------------------------------------------------------------------
// 2点間の距離を取得
//---------------------------------------------------------------------------
float Vector3::sqrtf(Vector3 a, Vector3 b) const
{
    float result;

    result = std::sqrtf((a.x_- b.x_) * (a.x_ - b.x_) + (a.z_ - b.z_) * (a.z_ - b.z_));

    return result;
}

//---------------------------------------------------------------------------
// 2点間の角度を取得
//---------------------------------------------------------------------------
float Vector3::radian(Vector3 a, Vector3 b) const
{
    float result;

    result = std::atan2(b.z_ - a.z_, b.x_ - x_);

    return result;
}


//---------------------------------------------------------------------------
//	内積
//---------------------------------------------------------------------------
f32 Vector3::dot(Vector3 a, Vector3 b)
{
    return (a.x_ * b.x_) + (a.y_ * b.y_) + (a.z_ * b.z_);
}

//---------------------------------------------------------------------------
//	外積
//---------------------------------------------------------------------------
Vector3 Vector3::cross(Vector3 a, Vector3 b)
{
    Vector3 result;

    result.x_ = (a.y_ * b.z_) - (a.z_ * b.y_);
    result.y_ = (a.z_ * b.x_) - (a.x_ * b.z_);
    result.z_ = (a.x_ * b.y_) - (a.y_ * b.x_);

    return result;
}


//---------------------------------------------------------------------------
//! 座標変換(平行移動あり)
//---------------------------------------------------------------------------
Vector4 Vector3::transform(const Matrix& matrix)
{
    Vector4 result;

    result.x_ = (x_ * matrix.m_[0][0]) +
                (y_ * matrix.m_[1][0]) +
                (z_ * matrix.m_[2][0]) +
                (matrix.m_[3][0]);

    result.y_ = (x_ * matrix.m_[0][1]) +
                (y_ * matrix.m_[1][1]) +
                (z_ * matrix.m_[2][1]) +
                (matrix.m_[3][1]);

    result.z_ = (x_ * matrix.m_[0][2]) +
                (y_ * matrix.m_[1][2]) +
                (z_ * matrix.m_[2][2]) +
                (matrix.m_[3][2]);

    result.w_ = (x_ * matrix.m_[0][3]) +
                (y_ * matrix.m_[1][3]) +
                (z_ * matrix.m_[2][3]) +
                (matrix.m_[3][3]);

    return result;
}

//---------------------------------------------------------------------------
//! 座標変換(ベクトルの回転。平行移動なし)
//---------------------------------------------------------------------------
Vector3 Vector3::transformNormal(const Matrix& matrix)
{
    Vector3 result;

    result.x_ = (x_ * matrix.m_[0][0]) +
                (y_ * matrix.m_[1][0]) +
                (z_ * matrix.m_[2][0]);

    result.y_ = (x_ * matrix.m_[0][1]) +
                (y_ * matrix.m_[1][1]) +
                (z_ * matrix.m_[2][1]);

    result.z_ = (x_ * matrix.m_[0][2]) +
                (y_ * matrix.m_[1][2]) +
                (z_ * matrix.m_[2][2]);

    return result;
}

//===========================================================================
//	EOF
//===========================================================================
