//---------------------------------------------------------------------------
//!	@file	camera.cpp
//!	@brief	カメラ
//---------------------------------------------------------------------------

//===========================================================================
//  Camera
//===========================================================================
//---------------------------------------------------------------------------
//! 位置を設定
//---------------------------------------------------------------------------
void Camera::setPosition(const float3& position)
{
    position_ = position;
}

//---------------------------------------------------------------------------
//! 注視点を設定
//---------------------------------------------------------------------------
void Camera::setLookAt(const float3& lookAt)
{
    lookAt_ = lookAt;
}

//---------------------------------------------------------------------------
//! 世界の上方向ベクトルを設定
//---------------------------------------------------------------------------
void Camera::setWorldUp(const float3& worldUp)
{
    worldUp_ = worldUp;
}

//---------------------------------------------------------------------------
//! 更新
//---------------------------------------------------------------------------
void Camera::update()
{
    // 行列を作成
    matView_ = math::lookAtRH(position_, lookAt_, worldUp_);
    matProj_ = math::perspectiveFovRH(45.0f * (math::PI / 180.0f), 16.0f / 9.0f, 0.01f, 10000.0f);

    // カメラのワールド行列はビュー行列の逆行列でもある
    matCameraWorld_ = inverse(matView_);
}

//---------------------------------------------------------------------------
//! ビュー行列を取得
//---------------------------------------------------------------------------
const matrix& Camera::view()
{
    return matView_;
}

//---------------------------------------------------------------------------
//! 投影行列を取得
//---------------------------------------------------------------------------
const matrix& Camera::projection()
{
    return matProj_;
}

//===========================================================================
//  CameraDebug
//===========================================================================

POINT mousePosition_;

//---------------------------------------------------------------------------
//! 更新
//---------------------------------------------------------------------------
void CameraDebug::update()
{
    const auto& m{ matCameraWorld_ };
    float3      right = float3{ m._11, m._12, m._13 };           // 右方向のベクトル
    float3      top   = float3{ m._21, m._22, m._23 };           // 上方向のベクトル
    float3      front = float3{ m._31, m._32, m._33 } * -1.0f;   // 前方向のベクトル

    //----------------------------------------------------------
    // マウスの移動量を取得
    //----------------------------------------------------------
    POINT p;
    GetCursorPos(&p);

    // 移動差分
    f32 dx = static_cast<f32>(p.x - mousePosition_.x);
    f32 dy = static_cast<f32>(p.y - mousePosition_.y);

    mousePosition_ = p;

    //----------------------------------------------------------
    // カメラ移動
    //----------------------------------------------------------
    {
        float3 dir(0.0f, 0.0f, 0.0f);
        if(GetKeyState('W') & 0x8000) {
            dir += front;
        }
        if(GetKeyState('S') & 0x8000) {
            dir -= front;
        }
        if(GetKeyState('A') & 0x8000) {
            dir -= right;
        }
        if(GetKeyState('D') & 0x8000) {
            dir += right;
        }

        if(dot(dir, dir).x > 0.0f) {
            dir = normalize(dir) * 0.2f;
        }

        // 平行移動の場合は位置と注視点を同時に移動
        position_ += dir;
        lookAt_ += dir;
    }

    //----------------------------------------------------------
    // 回転
    //----------------------------------------------------------
    if(application::hasMouseFocus()) {   // ウィンドウ上でドラッグ中の場合
        // 左クリック
        if(GetKeyState(VK_LBUTTON) & 0x8000) {
            float3 dir = lookAt_ - position_;

            if(GetKeyState(VK_CONTROL) & 0x8000) {
                // 上下移動
                position_ += top * dy * 0.02f;
            }
            else if(GetKeyState(VK_SHIFT) & 0x8000) {
                // XZ平面上での移動
                position_ -= right * dx * 0.02f;
                position_ += front * dy * 0.02f;
            }
            else {
                // 左右回転
                matrix rotY = math::rotateY(dx * 0.005f);
                dir         = mul(rotY, float4(dir, 0.0f)).xyz;

                // 上下回転
                matrix rotX = math::rotateAxis(right, dy * 0.005f);
                dir         = mul(rotX, float4(dir, 0.0f)).xyz;
            }
            lookAt_ = position_ + dir;
        }
    }

    //----------------------------------------------------------
    // カメラ行列の更新
    //----------------------------------------------------------
    Camera::update();
}
