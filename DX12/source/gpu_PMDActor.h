//---------------------------------------------------------------------------
//!	@file	gpu_PMDActor.h
//!	@brief	GPU PMDActor
//---------------------------------------------------------------------------
#pragma once

namespace gpu {

//----------------------------------------------------------
//! PMDファイルの基本情報
//----------------------------------------------------------
struct PMDHeader
{
    float version;
    char  model_name[20];   // モデル名
    char  comment[256];     // モデルコメント
};

//-----------------------------------------------------------------------
//! PMDマテリアル情報
//-----------------------------------------------------------------------
#pragma pack(1)   // ここから１バイトパッキングとなり、アライメントは発生しない
struct PMDMaterial
{
    XMFLOAT3 diffuse;       // ディフューズ色
    float    alpha;         // ディフューズα
    float    specularity;   // スペキュラ色
    XMFLOAT3 specular;      // スペキュラ色
    XMFLOAT3 ambient;       // アンビエント色
    u8       toonIdx;       // トゥーン番号
    u8       edgeFlg;       // マテリアル毎の輪郭線フラグ
                            // 2バイトのパディングが発生
    u32  indicesNum;        // このマテリアルが割り当たるインデックス数
    char texFilePath[20];   // テクスチャファイル名(プラスアルファ)
};
// 70バイトのはずだが、パディングが発生するため72バイトになる
#pragma pack()   // 1バイトパッキング解除

//-----------------------------------------------------------------------
//! シェーダ側に投げられるマテリアルデータ
//-----------------------------------------------------------------------
struct MaterialForHlsl
{
    XMFLOAT3 diffuse;       //ディフューズ色
    float    alpha;         // ディフューズα
    XMFLOAT3 specular;      //スペキュラ色
    float    specularity;   //スペキュラの強さ(乗算値)
    XMFLOAT3 ambient;       //アンビエント色
};
//-----------------------------------------------------------------------
//! シェーダー側に投げないマテリアルデータ
//-----------------------------------------------------------------------
struct AdditionalMaterial
{
    std::string texturePath;   //テクスチャファイルパス
    int         toonIndex;     //トゥーン番号
    bool        edgeFlg;       //マテリアル毎の輪郭線フラグ
};
//-----------------------------------------------------------------------
//! マテリアルデータ
//-----------------------------------------------------------------------
struct Material
{
    u32                indicesNum;   //インデックス数
    MaterialForHlsl    material;     //シェーダー側に投げるデータ
    AdditionalMaterial additional;   //シェーダー側に投げないデータ
};

//-----------------------------------------------------------------------
//! 読み込み用のボーン構造体
//-----------------------------------------------------------------------
#pragma pack(1)
struct Bone
{
    char     boneName[20];   // ボーン名
    u16      parentNo;       // 親ボーン
    u16      nextNo;         // 先端のボーン番号
    u8       type;           // ボーン種別
    u16      ikBoneNo;       // IKボーン番号
    XMFLOAT3 pos;            // ボーンの基本点座標
};
#pragma pack()

//-----------------------------------------------------------------------
//! ボーンノード
//-----------------------------------------------------------------------
struct BoneNode
{
    u32                    boneIdx;    // ボーンインデックス
    u32                    boneType;   //ボーン種別
    u32                    parentBone;
    u32                    ikParentBone;   //IK親ボーン
    DirectX::XMFLOAT3      startPos;       // ボーン基準点(回転の中心)
    std::vector<BoneNode*> children;   // 子ノード
};

//-----------------------------------------------------------------------
//! ボーン種別
//-----------------------------------------------------------------------
enum class BoneType
{
    Rotation,        //回転
    RotAndMove,      //回転＆移動
    IK,              //IK
    Undefined,       //未定義
    IKChild,         //IK影響ボーン
    RotationChild,   //回転影響ボーン
    IKDestination,   //IK接続先
    Invisible        //見えないボーン
};

//-----------------------------------------------------------------------
//! PMDインバースキネマティックス
//-----------------------------------------------------------------------
struct PMDIK
{
    u16              boneIdx;      //IK対象のボーンを示す
    u16                   targetIdx;    //ターゲットに近づけるためのボーンのインデックス
    u16                   iterations;   //試行回数
    float                 limit;        //一回当たりの回転制限
    std::vector<u16>      nodeIdxes;    //間のノード番号
};


//---------------------------------------------------------------------------
//! 白テクスチャを作成
//! @return 白テクスチャバッファ
//---------------------------------------------------------------------------
ID3D12Resource* CreateWhiteTexture();

//---------------------------------------------------------------------------
// 黒テクスチャを作成
//---------------------------------------------------------------------------
ID3D12Resource* CreateBlackTexture();

//---------------------------------------------------------------------------
//! トゥーンのためのグラデーションテクスチャ
//! @return  グラデーションバッファ
//---------------------------------------------------------------------------
ID3D12Resource* CreateGrayGradationTexture();

//---------------------------------------------------------------------------
//! ファイル名から拡張子を取得する
//! @param  path 対象のパス文字列
//! @return      拡張子
//---------------------------------------------------------------------------
std::string GetExtension(const std::string& path);

//---------------------------------------------------------------------------
//! ファイル名から拡張子を取得する(ワイド文字版)
//! @param  path 対象のパス文字列
//! @return      拡張子
//---------------------------------------------------------------------------
std::wstring GetExtension(const std::wstring& path);

//---------------------------------------------------------------------------
//! モデルのパスとテクスチャのパスから合成パスを得る
//! @param  modelPath アプリケーションから見たpmdモデルのパス
//! @param  texPath 　PMDモデルから見たテクスチャのパス
//! @return           アプリケーションから見たテクスチャのパス
//---------------------------------------------------------------------------
std::string GetTexturePathFromModelAndTexPath(const std::string& modelPath, const char* texPath);

//---------------------------------------------------------------------------
//! テクスチャのパスをセパレータ文字で分離する
//! @param  path     対象のパス文字列
//! @param  splitter 区切り文字
//! @return          分離前後の文字列ペア
//---------------------------------------------------------------------------
std::pair<std::string, std::string> SplitFileName(const std::string& path, const char splitter = '*');

//---------------------------------------------------------------------------
//! std::string(マルチバイト文字列) から wstring(ワイド文字列)を得る
//! @param  str マルチバイト文字列
//! @retrun     変換されたワイド文字列
//---------------------------------------------------------------------------
std::wstring GetWideStringFromString(const std::string& str);

//---------------------------------------------------------------------------
//! Z軸を特定の方向を向かす行列を返す関数
//! @param lookat 向かせたい方向ベクトル
//! @param up     上ベクトル
//! @param right  右ベクトル
//! @return Z軸が特定の向いた行列
//---------------------------------------------------------------------------
XMMATRIX LookAtMatrix(const XMVECTOR& lookat, XMFLOAT3& up, XMFLOAT3& right);

//---------------------------------------------------------------------------
//! 特定のベクトルを特定の方向に向けるための行列を返す
//! @param origin 特定のベクトル
//! @param lookat 向かせたい方向
//! @param up     上ベクトル
//! @param right  右ベクトル
//! @retval 特定のベクトルを特定の方向に向けるための行列
//---------------------------------------------------------------------------
XMMATRIX LookAtMatrix(const XMVECTOR& origin, const XMVECTOR& lookat, XMFLOAT3& up, XMFLOAT3& right);


}   // namespace gpu